var CONFIG = require ('./config'),
    fs = require('fs'),
    redis = require("redis"),
    client = redis.createClient(),
    xml2js = require('xml2js'),
    parser = new xml2js.Parser(),
    child_process = require('child_process'),
    nodemailer = require('nodemailer'),
    Slack = require('node-slack');
    slack = new Slack('https://hooks.slack.com/services/' + CONFIG.SLACK_TOKEN);
    verbose = true,
    alertLog = "",
    callBackCounterToExit = 0,
    transporter = nodemailer.createTransport({
    	service: CONFIG.EMAIL_PROVIDER,
    	auth: {
    		user: CONFIG.EMAIL_USER,
    		pass: CONFIG.EMAIL_PASSWORD
    	}
    });

client.on("error", function (err) {
	console.log("Error " + err);
});

// http://stackoverflow.com/questions/1144783/replacing-all-occurrences-of-a-string-in-javascript on 20150531 @ 17:05 EST
function replaceAll(find, replace, str) {
	return str.replace(new RegExp(find, 'g'), replace);
}

function sendSlack (message, channel) {
	slack.send({
		text: message,
		channel: channel,
		username: 'CVE Watch'
	}, function (error) {
		if (error != null && error.message != null) {
			console.log ("Slack: " + error.message);
		}
	});
}

function sendAlerts (alertLog) {
	for (emaillistIndex = 0; emaillistIndex < emaillist.length; emaillistIndex++) {
		// setup e-mail data with unicode symbols
		var mailOptions = {
			from: 'CVE Watch âœ” <security@alert.com>', // sender address
			to: emaillist[emaillistIndex], // list of receivers
			subject: 'New vulnerabilities found', // Subject line
			text: alertLog, // plaintext body
			html: alertLog // html body
		};

		if (alertLog != "") {
			var slackMessage = replaceAll ("<br />", String.fromCharCode(13) + String.fromCharCode(10), alertLog);

			// send mail with defined transport object
			transporter.sendMail(mailOptions, function(error, info){
				if (error){
					console.log(error);
				} else {
					if (verbose) console.log('Message sent: ' + info.response);
				}
			});

			slackalertlist.forEach (function (val, index, array) {
				sendSlack(slackMessage, val);

				// if last item in list
				if (index == array.length - 1) {
					// terminate the program
					console.log ("Done");
					process.exit(1);
				}
			});
		} else {
			slackloglist.forEach (function (val, index, array) {
				sendSlack("No new vulnerabilities detected", val);

				// if last item in list
				if (index == array.length - 1) {
					// terminate the program
					console.log ("Done");
					process.exit(1);
				}
			});
		}
	}
}

function addVulerability (cve, note) {
	callBackCounterToExit++;
	client.get (cve, function (err, reply) {
		if (reply == null) {

			if (verbose) {
				console.log ("New vulnerability " + cve);
				console.log ("adding to redis");
				console.log (cve + "\\n" + note);
			}
			client.set (cve, note);

			alertLog += cve + "<br />" + note + "<br /><br />";
		}

		if (--callBackCounterToExit == 0) {
			sendAlerts (alertLog);
		}
	});
}

function updateCVE() {
	child_process.execFile ("wget", ["http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml", "-O", "allitems-cvrf-year-2015.xml"], function (err, out, code) {
		fs.readFile('allitems-cvrf-year-2015.xml', function(err, data) {
			parser.parseString(data, function (err, result) {
				var numberOfVulerabilities = result.cvrfdoc.Vulnerability.length;

				for (var currentVulerabilityIndex = 0; currentVulerabilityIndex < numberOfVulerabilities; currentVulerabilityIndex++) {
					var currentVulerability = result.cvrfdoc.Vulnerability[currentVulerabilityIndex];

					addVulerability (
						currentVulerability.CVE,
						currentVulerability.Notes[0].Note[0]._
					);
				}
			});
		});
	});
}

// TODO: find another way to pull data from redis.
client.get ('watchlist', function (watchlistError, watchlistRedisReply) {
	if (watchlistRedisReply != null) {
		watchlist = JSON.parse(watchlistRedisReply.toString());

		client.get ('emaillist', function (emaillistRedisError, emaillistRedisReply) {
			if (emaillistRedisReply != null) {
				emaillist = JSON.parse(emaillistRedisReply.toString());

				client.get ('slackloglist', function (slacklogRedisError, slacklogRedisReply) {
					if (slacklogRedisReply != null) {
						slackloglist = JSON.parse(slacklogRedisReply.toString());

						client.get ('slackalertlist', function (slackalertRedisError, slackalertRedisReply) {
							if (slackalertRedisReply != null) {
								slackalertlist = JSON.parse(slackalertRedisReply.toString());

								updateCVE ();
							} else {
								console.log ("add an item to the slack alert list");
							}
						});
					} else {
						console.log ("add an item to the slack log list");
					}
				});
			} else {
				console.log ("add an item to the emaillist");
			}
		});
	} else {
		console.log ("add an item to the watchlist");
	}
});