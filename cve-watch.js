var fs = require('fs'),
	redis = require("redis"),
    xml2js = require('xml2js'),
    child_process = require('child_process'),
    nodemailer = require('nodemailer');

var verbose = false,
	client = redis.createClient(),
	parser = new xml2js.Parser(),
	watchList = Array ('haproxy', 'nginx', 'squid', 'mariadb', 'wordpress'),
	alertLog = "",
	callBackCounterToExit = 0;

client.on("error", function (err) {
	console.log("Error " + err);
});

function addVulerability (cve, note) {
	callBackCounterToExit++;
	client.get (cve, function (err, reply) {
		if (reply == null) {

			if (verbose) console.log ("New vulnerability " + cve);
			if (verbose) console.log ("adding to redis");
			client.set (cve, note);

			for (var currentWatchListItemIndex = 0; currentWatchListItemIndex < watchList.length; currentWatchListItemIndex++) {
				if (note.toLowerCase().indexOf(watchList[currentWatchListItemIndex].toLowerCase()) > -1) {
					console.log ("Notify " + cve + "\\n" + note);

					alertLog += cve + "<br />" + note + "<br /><br />";
				}
			}
		}

		if (--callBackCounterToExit == 0) {
			// create reusable transporter object using SMTP transport
			var transporter = nodemailer.createTransport({
				service: 'Gmail',
				auth: {
					user: 'youremail',
					pass: 'yourpassword'
				}
			});

			// setup e-mail data with unicode symbols
			var mailOptions = {
				from: 'CVE Watch âœ” <security@alert.com>', // sender address
				to: 'youremail', // list of receivers
				subject: 'New vulnerabilities found', // Subject line
				text: alertLog, // plaintext body
				html: alertLog // html body
			};

			if (alertLog != "") {
				// send mail with defined transport object
				transporter.sendMail(mailOptions, function(error, info){
					if (error){
						console.log(error);
					} else {
						console.log('Message sent: ' + info.response);
					}

					// terminate the program
					console.log ("Done");
					process.exit(1);
				});
			} else {
				// terminate the program
				console.log ("Done");
				process.exit(1);
			}
		}
	});
}
	
child_process.execFile ("wget", ["http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml", "-O", "allitems-cvrf-year-2015.xml"], function (err, out, code) {
	fs.readFile('allitems-cvrf-year-2015.xml', function(err, data) {
		parser.parseString(data, function (err, result) {
			var numberOfVulerabilities = result.cvrfdoc.Vulnerability.length;

			for (var currentVulerabilityIndex = 0; currentVulerabilityIndex < numberOfVulerabilities; currentVulerabilityIndex++) {
				var currentVulerability = result.cvrfdoc.Vulnerability[currentVulerabilityIndex];

/*				addVulerability (
					currentVulerability.CVE,
					currentVulerability.Notes[0].Note[0]._
				);*/
			}
		});
	});
});
