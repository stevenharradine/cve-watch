var CONFIG                = require ('./config'),
    utils                 = require("./lib/utils.js"),
    fs                    = require('fs'),
    redis                 = require("redis"),
    xml2js                = require('xml2js'),
    parser                = new xml2js.Parser(),
    child_process         = require('child_process'),
    nodemailer            = require('nodemailer'),
    Slack                 = require('node-slack');
    slack                 = new Slack('https://hooks.slack.com/services/' + CONFIG.SLACK_TOKEN);
    verbose               = true,
    alertLog              = "",
    callBackCounterToExit = 0,
    vulnerabilitySource   = "http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml";

var client = redis.createClient();
client.on("error", function (err) {
	console.log("Error " + err);
});

function sendSlack (message, channel, index, array) {
	slack.send({
		text: message,
		channel: channel,
		username: 'CVE Watch'
	}, function (error) {
		if (error != null && error.message != null) {
			console.log ("Slack: " + error.message);
		}

		// if last item in list
		if (index == array.length - 1) {
			// terminate the program
			console.log ("Done");
			client.quit ();
		}
	});
}

function sendAlerts (alertLog) {
	if (alertLog != "") {
		var slackMessage = utils.replaceAll ("<br />", String.fromCharCode(13) + String.fromCharCode(10), alertLog),
		    transporter  = nodemailer.createTransport({
		    	service: CONFIG.EMAIL_PROVIDER,
		    	auth: {
		    		user: CONFIG.EMAIL_USER,
		    		pass: CONFIG.EMAIL_PASSWORD
		    	}
		    });

			client.get ('emaillist', function (emaillistRedisError, emaillistRedisReply) {
				if (emaillistRedisReply != null) {
					emaillist = JSON.parse(emaillistRedisReply.toString());

					emaillist.forEach (function (emailAddress, index, array) {
						var mailOptions = { 							// setup e-mail data with unicode symbols
							from: 'CVE Watch âœ” <security@alert.com>',	// sender address
							to: emailAddress,							// list of receivers
							subject: 'New vulnerabilities found',		// Subject line
							text: alertLog, 							// plaintext body
							html: alertLog 								// html body
						};

						// send mail with defined transport object
						transporter.sendMail(mailOptions, function(error, info){
							if (error){
								console.log(error);
							} else {
								if (verbose) console.log('Message sent: ' + info.response);
							}
						});
					});
				} else {
					console.log ("add an item to the emaillist");
				}
			});
			
		client.get ('slackalertlist', function (error, reply) {
			if (reply != null) {
				slackalertlist = JSON.parse(reply.toString());

				slackalertlist.forEach (function (channel, index, array) {
					sendSlack(slackMessage, channel, index, array);
				});
			}
		});
	} else {
		client.get ('slackloglist', function (error, reply) {
			if (reply != null) {
				slackloglist = JSON.parse(reply.toString());

				slackloglist.forEach (function (val, index, array) {
					sendSlack("No new vulnerabilities detected", val, index, array);
				});
			} else {
				console.log ("add an item to slackloglist");
			}
		});
	}
}

function addVulerability (cve, note) {
	callBackCounterToExit++;

	client.get (cve, function (err, reply) {
		if (reply == null) {
			if (verbose) {
				console.log ("New vulnerability " + cve);
				console.log (cve);
				console.log (note);
			}

			client.set (cve, note, function (error, reply) {
				if (error != null) {
					console.log ("Error: " + error);
				}
			});

			alertLog += cve + "<br />" + note + "<br /><br />";
		}

		if (--callBackCounterToExit == 0) {
			sendAlerts (alertLog);
		}
	});
}

child_process.execFile ("wget", [vulnerabilitySource, "-O", "allitems-cvrf-year-2015.xml"], function (err, out, code) {
	fs.readFile('allitems-cvrf-year-2015.xml', function(err, data) {
		parser.parseString(data, function (err, result) {
			result.cvrfdoc.Vulnerability.forEach (function (currentVulerability) {
				addVulerability (
					currentVulerability.CVE,
					currentVulerability.Notes[0].Note[0]._
				);
			});
		});
	});
});