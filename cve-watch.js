var fs = require('fs'),
	redis = require("redis"),
    xml2js = require('xml2js'),
    child_process = require('child_process'),
    nodemailer = require('nodemailer'),
    verbose = false,
	client = redis.createClient(),
	parser = new xml2js.Parser(),
	watchlist = Array (),
	emaillist = Array (),
	alertLog = "",
	callBackCounterToExit = 0,
    transporter = nodemailer.createTransport({
		service: 'Gmail',
		auth: {
			user: 'youremail',
			pass: 'yourpassword'
		}
	});

client.on("error", function (err) {
	console.log("Error " + err);
});

function sendAlertEmails (alertLog) {
	for (emaillistIndex = 0; emaillistIndex < emaillist.length; emaillistIndex++) {
		// setup e-mail data with unicode symbols
		var mailOptions = {
			from: 'CVE Watch âœ” <security@alert.com>', // sender address
			to: emaillist[emaillistIndex], // list of receivers
			subject: 'New vulnerabilities found', // Subject line
			text: alertLog, // plaintext body
			html: alertLog // html body
		};

		if (alertLog != "") {
			// send mail with defined transport object
			transporter.sendMail(mailOptions, function(error, info){
				if (error){
					console.log(error);
				} else {
					if (verbose) console.log('Message sent: ' + info.response);
				}

				// terminate the program
				console.log ("Done");
				process.exit(1);
			});
		} else {
			// terminate the program
			console.log ("Done");
			process.exit(1);
		}
	}
}

function addVulerability (cve, note) {
	callBackCounterToExit++;
	client.get (cve, function (err, reply) {
		if (reply == null) {

			if (verbose) console.log ("New vulnerability " + cve);
			if (verbose) console.log ("adding to redis");
			client.set (cve, note);

			for (var currentWatchListItemIndex = 0; currentWatchListItemIndex < watchlist.length; currentWatchListItemIndex++) {
				if (note.toLowerCase().indexOf(watchlist[currentWatchListItemIndex].toLowerCase()) > -1) {
					if (verbose) console.log (cve + "\\n" + note);

					alertLog += cve + "<br />" + note + "<br /><br />";
				}
			}
		}

		if (--callBackCounterToExit == 0) {
			sendAlertEmails (alertLog);
		}
	});
}

// taken from http://stackoverflow.com/questions/784012/javascript-equivalent-of-phps-in-array on 20150518 @ 19:50 EST
function inArray(needle, haystack) {
    var length = haystack.length;
    for(var i = 0; i < length; i++) {
        if(haystack[i] == needle) return true;
    }
    return false;
}

function showlist (listname) {
	client.get (listname, function (err, reply) {
		if (reply != null) {
			var list = JSON.parse(reply.toString());
			
			for (i = 0; i < list.length; i++) {
				console.log (list[i]);
			}
		} else {
			console.log ("no " + listname + " found");
		}

		client.quit();
	});
}

function addToList (listname, itemToAdd) {
	client.get (listname, function (err, reply) {
		if (reply != null) {
			list = JSON.parse(reply.toString());

			if (!inArray (itemToAdd, list)) {
				if (verbose) console.log ("adding " + itemToAdd + " to " + listname);
				list.push (itemToAdd);
				client.set (listname, JSON.stringify (list), function (err, reply) {
					client.quit();
				});
			} else {
				if (verbose) console.log ("item already on " + listname);
				client.quit();
			}
		} else {
			if (verbose) console.log ("adding first item " + itemToAdd + " to " + listname);
			client.set (listname, JSON.stringify ([itemToAdd]), function (err, reply) {
				client.quit();
			});
		}
	});
}

function removeFromlist (listname, itemToRemove) {
	client.get (listname, function (err, reply) {
		if (reply != null) {
			list = JSON.parse(reply.toString());

			if (inArray (itemToRemove, list)) {
				if (verbose) console.log ("removing " + itemToRemove + " from " + listname);

				list.splice (list.indexOf(itemToRemove), 1);
				
				client.set (listname, JSON.stringify (list), function (err, reply) {
					client.quit();
				});

				client.quit();
			} else {
				if (verbose) console.log ("item not found in " + listname);
				client.quit();
			}
		} else {
			console.log ("error");
		}
	});
}

function updateCVE() {
	child_process.execFile ("wget", ["http://cve.mitre.org/data/downloads/allitems-cvrf-year-2015.xml", "-O", "allitems-cvrf-year-2015.xml"], function (err, out, code) {
		fs.readFile('allitems-cvrf-year-2015.xml', function(err, data) {
			parser.parseString(data, function (err, result) {
				var numberOfVulerabilities = result.cvrfdoc.Vulnerability.length;

				for (var currentVulerabilityIndex = 0; currentVulerabilityIndex < numberOfVulerabilities; currentVulerabilityIndex++) {
					var currentVulerability = result.cvrfdoc.Vulnerability[currentVulerabilityIndex];

					addVulerability (
						currentVulerability.CVE,
						currentVulerability.Notes[0].Note[0]._
					);
				}
			});
		});
	});
}

process.argv.forEach(function (val, index, array) {
	var validArguments = Array ('show', 'add', 'remove', 'verbose');

	for (validArgumentsIndex = 0; validArgumentsIndex < validArguments.length; validArgumentsIndex++) {
		var thisArgument = validArguments[validArgumentsIndex];
		if (val == "--" + thisArgument) {
			if (thisArgument == 'verbose') {
				verbose = true;
			} else {
				var listArgument = array[index + 1];
				var listItem = array.length > index + 2 ? array[index + 2] : null;

				if      (listArgument == 'watchlist' && thisArgument == "show")   showlist       ('watchlist');
				else if (listArgument == 'emaillist' && thisArgument == "show")   showlist       ('emaillist');
				else if (listArgument == 'watchlist' && thisArgument == "add")    addToList      ('watchlist', listItem);
				else if (listArgument == 'emaillist' && thisArgument == "add")    addToList      ('emaillist', listItem);
				else if (listArgument == 'watchlist' && thisArgument == "remove") removeFromlist ('watchlist', listItem);
				else if (listArgument == 'emaillist' && thisArgument == "remove") removeFromlist ('emaillist', listItem);
				else {
					console.log ("--" + thisArgument + " { watchlist | emaillist }");
					client.quit();
				}
			}
		}
	}
});

// if there are no commandline arguments passed 2 = ['node', 'cve-watch.js'];
if (process.argv.length == 2) {
	client.get ('watchlist', function (watchlistError, watchlistRedisReply) {
		if (watchlistRedisReply != null) {
			watchlist = JSON.parse(watchlistRedisReply.toString());

			client.get ('emaillist', function (emaillistRedisError, emaillistRedisReply) {
				if (emaillistRedisReply != null) {
					emaillist = JSON.parse(emaillistRedisReply.toString());

					updateCVE ();
				} else {
					console.log ("add an item to the emaillist");
				}
			});
		} else {
			console.log ("add an item to the watchlist");
		}
	});
}